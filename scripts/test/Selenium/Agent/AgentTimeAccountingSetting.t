# --
# Copyright (C) 2001-2020 OTRS AG, https://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file COPYING for license information (GPL). If you
# did not receive this file, see https://www.gnu.org/licenses/gpl-3.0.txt.
# --

## no critic (Modules::RequireExplicitPackage)
use strict;
use warnings;
use utf8;

use vars (qw($Self));

my $Selenium = $Kernel::OM->Get('Kernel::System::UnitTest::Selenium');

$Selenium->RunTest(
    sub {

        my $Helper = $Kernel::OM->Get('Kernel::System::UnitTest::Helper');

        # Create test user and login.
        my $TestUserLogin = $Helper->TestUserCreate(
            Groups => [ 'admin', 'users' ],
        ) || die "Did not get test user";

        $Selenium->Login(
            Type     => 'Agent',
            User     => $TestUserLogin,
            Password => $TestUserLogin,
        );

        # Create another test user.
        my $TestUser = $Helper->TestUserCreate();

        # Get test user ID.
        my $TestUserID = $Kernel::OM->Get('Kernel::System::User')->UserLookup(
            UserLogin => $TestUser,
        );

        my $ScriptAlias = $Kernel::OM->Get('Kernel::Config')->Get('ScriptAlias');

        # Navigate to AgentTimeAccountingSetting.
        $Selenium->VerifiedGet("${ScriptAlias}index.pl?Action=AgentTimeAccountingSetting");

        # Check time account setting page IDs.
        for my $SettingPage (
            qw(
            NewUserID
            Core_UI_AutogeneratedID_0
            Core_UI_AutogeneratedID_1
            Core_UI_AutogeneratedID_2
            .FilterBox
            )
            )
        {
            my $Selector = ( $SettingPage =~ m/^[a-zA-Z0-9]/ ? '#' : '' ) . $SettingPage;
            my $Element  = $Selenium->find_element( $Selector, 'css' );
            $Element->is_enabled();
            $Element->is_displayed();
        }

        # Check add project and add task.
        for my $SettingAdd ( 'Add', 'Add task', ) {
            my $Element = $Selenium->find_element("//button[\@value='$SettingAdd'][\@type='submit']");
            $Element->is_enabled();
            $Element->is_displayed();
        }

        # For check 'new user' input autocomplete.
        $Selenium->find_element( 'input[id="NewUserID_Search"]', 'css' );

        # Click on 'Add project'.
        $Selenium->find_element("//button[\@value='Add'][\@type='submit']")->VerifiedClick();

        # Check project page IDs.
        for my $ProjectPageID (qw(Project ProjectDescription ProjectStatus))
        {
            my $Element = $Selenium->find_element( "#$ProjectPageID", 'css' );
            $Element->is_enabled();
            $Element->is_displayed();
        }

        # Create test project.
        my $ProjectTitle       = 'Project ' . $Helper->GetRandomID();
        my $ProjectDescription = 'Selenium test project';
        $Selenium->find_element( "#Project",            'css' )->send_keys($ProjectTitle);
        $Selenium->find_element( "#ProjectDescription", 'css' )->send_keys($ProjectDescription);
        $Selenium->find_element("//button[\@value='Submit'][\@type='submit']")->VerifiedClick();

        # Verify created test project.
        for my $ProjectVerify ( $ProjectTitle, $ProjectDescription ) {
            $Self->True(
                index( $Selenium->get_page_source(), $ProjectVerify ) > -1,
                "$ProjectVerify is found",
            );
        }

        # Click on 'Add task'.
        $Selenium->find_element("//button[\@value='Add task'][\@type='submit']")->VerifiedClick();

        # Check task page IDs.
        for my $TaskPageID (qw(Task TaskStatus)) {
            my $Element = $Selenium->find_element( "#$TaskPageID", 'css' );
            $Element->is_enabled();
            $Element->is_displayed();
        }

        # Create test task.
        my $ActionTitle = 'Task ' . $Helper->GetRandomID();
        $Selenium->find_element( "#Task", 'css' )->send_keys($ActionTitle);
        $Selenium->find_element("//button[\@value='Submit'][\@type='submit']")->VerifiedClick();

        # Verify created test task.
        $Self->True(
            index( $Selenium->get_page_source(), $ActionTitle ) > -1,
            "$ActionTitle is found",
        );

        # This change triggered a page load on a new page.
        $Selenium->execute_script(
            "\$('#NewUserID').val('$TestUserID').trigger('redraw.InputField').trigger('change');"
        );

        $Selenium->WaitFor(
            JavaScript =>
                'return typeof(Core) == "object" && typeof(Core.App) == "object" && Core.App.PageLoadComplete;'
        );
        $Selenium->WaitFor( JavaScript => "return typeof(\$) === 'function' && \$('#Description').length;" );

        # Check edit user page.
        for my $EditUserPageID (
            qw(Description ShowOvertime CreateProject AllowSkip Calendar DateStart-1 DateEnd-1 LeaveDays-1
            WeeklyHours-1 Overtime-1 PeriodStatus-1)
            )
        {
            my $Element = $Selenium->find_element( "#$EditUserPageID", 'css' );
            $Element->is_enabled();
            $Element->is_displayed();
        }

        $Selenium->execute_script("\$('#LeaveDays-1').val('');");
        $Selenium->find_element( "#LeaveDays-1", 'css' )->send_keys(0);
        $Selenium->find_element( "#DateStart-1", 'css' )->click();

        # Verify leave days correct format.
        $Self->Is(
            $Selenium->find_element( "#LeaveDays-1", 'css' )->get_value(),
            '0.00',
            "Leave Days correct format",
        );

        $Selenium->execute_script("\$('#LeaveDays-1').val('');");
        $Selenium->find_element( "#LeaveDays-1", 'css' )->send_keys(40);
        $Selenium->find_element( "#DateStart-1", 'css' )->click();

        # Verify leave days correct format.
        $Self->Is(
            $Selenium->find_element( "#LeaveDays-1", 'css' )->get_value(),
            '40.00',
            "Leave Days correct format",
        );

        # Click 'Add time period'.
        $Selenium->find_element("//button[\@value='Add time period'][\@type='submit']")->VerifiedClick();

        # Check for new added time period fields.
        for my $NewTimePeriodID (qw(DateStart-2 DateEnd-2 LeaveDays-2 WeeklyHours-2 Overtime-2 PeriodStatus-2))
        {
            my $Element = $Selenium->find_element( "#$NewTimePeriodID", 'css' );
            $Element->is_enabled();
            $Element->is_displayed();
        }

        # Edit user setting.
        my $UserDescription = 'Selenium test user setting';
        $Selenium->find_element( "#Description", 'css' )->clear();
        $Selenium->find_element( "#Description", 'css' )->send_keys($UserDescription);

        $Selenium->find_element( "#ShowOvertime", 'css' )->click();
        $Selenium->WaitFor( JavaScript => "return \$('#ShowOvertime:checked').length;" );

        $Selenium->find_element( "#CreateProject", 'css' )->click();
        $Selenium->WaitFor( JavaScript => "return \$('#CreateProject:checked').length;" );

        $Selenium->find_element( "#AllowSkip", 'css' )->click();
        $Selenium->WaitFor( JavaScript => "return \$('#AllowSkip:checked').length;" );

        $Selenium->find_element("//button[\@value='Submit'][\@type='submit']")->VerifiedClick();

        # Verify test user setting.
        my $SettingUser = "$TestUser $TestUser ($TestUser)";
        for my $SettingUserVerify ( $SettingUser, $UserDescription ) {
            $Self->True(
                index( $Selenium->get_page_source(), $SettingUserVerify ) > -1,
                "$SettingUserVerify is found",
            );
        }

        my $DBObject = $Kernel::OM->Get('Kernel::System::DB');

        # Get DB clean-up data.
        my @DBCleanData = (
            {
                Quoted  => $ProjectTitle,
                Table   => 'time_accounting_project',
                Where   => 'project',
                Bind    => '',
                Message => "$ProjectTitle is deleted",
            },
            {
                Quoted  => $ActionTitle,
                Table   => 'time_accounting_action',
                Where   => 'action',
                Bind    => '',
                Message => "$ActionTitle is deleted",
            },
            {
                Table   => 'time_accounting_user',
                Where   => 'user_id',
                Bind    => $TestUserID,
                Message => "Test user $TestUserID is removed from accounting setting",
            },
            {
                Table   => 'time_accounting_user_period',
                Where   => 'user_id',
                Bind    => $TestUserID,
                Message => "Test user $TestUserID is removed from accounting period",
            },
        );

        # Clean system from test created data.
        for my $Delete (@DBCleanData) {
            if ( $Delete->{Quoted} ) {
                $Delete->{Bind} = $DBObject->Quote( $Delete->{Quoted} );
            }
            my $Success = $DBObject->Do(
                SQL  => "DELETE FROM $Delete->{Table} WHERE $Delete->{Where} = ?",
                Bind => [ \$Delete->{Bind} ],
            );
            $Self->True(
                $Success,
                $Delete->{Message},
            );
        }
    }
);

1;
